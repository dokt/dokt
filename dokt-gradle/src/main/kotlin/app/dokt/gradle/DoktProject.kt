package app.dokt.gradle

import DoktExtension
import Layer.*
import app.dokt.generator.application.Application
import app.dokt.generator.code.KotlinSources
import app.dokt.generator.domain.model.BoundedContextModelReader
import org.gradle.api.Project
import org.gradle.kotlin.dsl.create

class DoktProject(project: Project)
    : KotlinProject<DoktExtension>(project, project.extensions.create("dokt")), Application {
    override val appDescription get() = project.description

    override val appDisplayName get() = project.description

    override val appName: String get() = project.name

    override val boundedContexts by lazy { BoundedContextModelReader.readContexts(sources) }

    override val domainSources by lazy { commonMainKotlin.toString() }

    override val generated by lazy { generatedDir.toString() }

    override val generatedSources by lazy { generatedCommonMain.toString() }

    override val generatedTestSources by lazy { generatedCommonTest.toString() }

    override val group get() = project.group.toString()

    val isDomainLayer by lazy { DOMAIN.abbreviations.any { path.contains(it) } || layer == DOMAIN }

    private val layer by lazy { extension.layer.orNull }

    private val sources by lazy { KotlinSources(commonMainKotlin.toPath()) }
}
